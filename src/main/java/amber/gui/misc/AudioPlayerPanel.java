package amber.gui.misc;

import amber.swing.UIUtil;
import java.io.File;
import java.io.IOException;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import amber.al.Audio;
import amber.al.Audio.State;
import amber.al.AudioIO;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.sound.midi.MidiUnavailableException;
import javax.swing.ImageIcon;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author Tudor
 */
public class AudioPlayerPanel extends javax.swing.JPanel {

    private File file;
    private Audio sound;
    private javax.swing.Timer timer;
    private final ImageIcon PLAY_ICON = new ImageIcon(ClassLoader.getSystemResource("icon/Player.Play.png"));
    private final ImageIcon PAUSE_ICON = new ImageIcon(ClassLoader.getSystemResource("icon/Player.Pause.png"));

    public AudioPlayerPanel(final Audio sound) {
        initComponents();
        this.sound = sound;
        //UIUtil.setComponentLF(positionSlider, "Nimbus");
        //UIUtil.setComponentLF(soundSlider, "Nimbus");

        openNativeButton.setIcon(UIUtil.getFileSystemIcon("mid"));

        timer = new javax.swing.Timer(100, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if(sound.getState() == State.STOPPED)
                    playButton.setIcon(PLAY_ICON);
                positionSlider.setValue(getPercentProgress());
            }
        });

        positionSlider.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent e) {
                int value = positionSlider.getValue();
                if (value != getPercentProgress()) {
                    sound.setMillisecondPosition((int) (sound.getMillisecondLength() * ((double) value / (double) 100)));
                }
            }
        });
    }

    /**
     * Creates new form AudioPlayerPanel
     */
    public AudioPlayerPanel(File file) throws Exception {
        this(AudioIO.read(file));
        this.file = file;
    }

    @Override
    public void removeNotify() {
        super.removeNotify();
        timer.stop();
        sound.stop();
    }

    private int getPercentProgress() {
        return (int) ((((double) sound.getMillisecondPosition()) / ((double) sound.getMillisecondLength())) * 100);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        playButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        openNativeButton = new javax.swing.JButton();
        positionSlider = new javax.swing.JSlider();
        loopToggle = new javax.swing.JToggleButton();
        soundSlider = new javax.swing.JSlider();

        playButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/Player.Play.png"))); // NOI18N
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        stopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/Player.Stop.png"))); // NOI18N
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        openNativeButton.setMaximumSize(new java.awt.Dimension(24, 24));
        openNativeButton.setMinimumSize(new java.awt.Dimension(24, 24));
        openNativeButton.setPreferredSize(new java.awt.Dimension(24, 24));
        openNativeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openNativeButtonActionPerformed(evt);
            }
        });

        positionSlider.setValue(0);
        positionSlider.setAutoscrolls(true);

        loopToggle.setMaximumSize(new java.awt.Dimension(65, 41));
        loopToggle.setMinimumSize(new java.awt.Dimension(65, 41));
        loopToggle.setPreferredSize(new java.awt.Dimension(65, 41));
        loopToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loopToggleActionPerformed(evt);
            }
        });

        soundSlider.setOrientation(javax.swing.JSlider.VERTICAL);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(positionSlider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(openNativeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loopToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(soundSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(positionSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(openNativeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(soundSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loopToggle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void openNativeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openNativeButtonActionPerformed
        try {
            // TODO: only works on Windows
            Runtime.getRuntime().exec("cmd /c " + file.getAbsolutePath());
        } catch (IOException ex) {
            ErrorHandler.alert(ex);
        }
    }//GEN-LAST:event_openNativeButtonActionPerformed

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        switch (sound.getState()) {
            case PLAYING:
                timer.stop();
                sound.pause();
                playButton.setIcon(PLAY_ICON);
                break;
            case STOPPED:
                positionSlider.setValue(0);
                sound.start();
                timer.start();
                playButton.setIcon(PAUSE_ICON);
                break;
            case PAUSED:
                sound.start();
                timer.start();
                playButton.setIcon(PAUSE_ICON);
                break;
        }

    }//GEN-LAST:event_playButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        timer.stop();
        sound.stop();
    }//GEN-LAST:event_stopButtonActionPerformed

    private void loopToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loopToggleActionPerformed
        sound.setLooping(loopToggle.isSelected());
    }//GEN-LAST:event_loopToggleActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton loopToggle;
    private javax.swing.JButton openNativeButton;
    private javax.swing.JButton playButton;
    private javax.swing.JSlider positionSlider;
    private javax.swing.JSlider soundSlider;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables
}
